普通适配方法：Canvas中Render Mode设置为Screen Space-Camera 同时拖入UI摄像机
将Canvas Scaler中UI Scale Mode设置为Scale With Screen Size 同时设置目标的宽高   其中Screen Match Mode三种中方法如下
    1）横屏一般采用第一种Match Width Or Height
    2）竖屏分为两种Expand用于从小到大 只要宽高中有一个符合就用此时的宽高  Shrink用于从大到小 同样只要宽高有一个符合就用此时的宽高
    
刘海屏等特殊屏幕适配方法：一般需要在代码中取两次安全区域 分为Unity的api与安卓api进行对比是否相同 一般先使用Unity后使用安卓
可以在Update中进行判断，如果两者不同的话就调用安卓api（AndroidStatusBarHeight方法）算出上方刘海屏高度重新计算安全区域area
    Unity api：Screen.safeArea.height;
    安卓 api：RectTransformHelper.GetSafeAreaRect (m_customizewindowsRootRect);
两者返回都为Rect

PlayerSetting中Resolution and Presentation中Render outside safe area用于设置刘海屏所在位置行是否渲染 勾选的话就会显示图像 否则就会为黑背景

一般竖屏游戏左右锚点，横屏游戏上下锚点

AndroidStatusBarHeight方法内容：
    //获取状态栏高度
    public int AndroidStatusBarHeight(){
        Debug.Log ("AndroidStatusBarHeight...");

        AndroidJavaClass androidJavaClass = new AndroidJavaClass (ANDROID_CLASS_PATH);
        AndroidJavaClass jc = new AndroidJavaClass ("com.unity3d.player.UnityPlayer");
        AndroidJavaObject jo = jc.GetStatic<AndroidJavaObject> ("currentActivity");

        if (null == androidJavaClass) {
            Debug.Log ("AndroidInstallApkInterface DeviceUtils not found!");
        }

        if (null == jc) {
            Debug.Log ("AndroidInstallApkInterface jc is null!");
        }

        int statusBarheight = androidJavaClass.CallStatic<int>("getStatusBarHeight", jo);
        Debug.Log ("AndroidStatusBarHeight statusBarheight: " + statusBarheight);

        return statusBarheight;
    }
